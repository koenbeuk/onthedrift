<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on On The Drift</title><link>https://www.onthedrift.com/posts/</link><description>Recent content in Posts on On The Drift</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>koen@linker.io (Koen)</managingEditor><webMaster>koen@linker.io (Koen)</webMaster><lastBuildDate>Mon, 03 May 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://www.onthedrift.com/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Introducing ScenarioTests, an experiment in improving the .NET testing experience</title><link>https://www.onthedrift.com/posts/scenario-tests/</link><pubDate>Mon, 03 May 2021 00:00:00 +0000</pubDate><author>koen@linker.io (Koen)</author><guid>https://www.onthedrift.com/posts/scenario-tests/</guid><description>When developing software, you&amp;rsquo;ll sooner or later be confronted with the notion of Tests. In the .NET landscape we have plenty of tools at our disposal to help us test our code. For the sake of an example, let&amp;rsquo;s imagine that we&amp;rsquo;re implementing a Stack datatype and we now want to prove that we can Push something on our stack:
[Fact] void Push_IncreasesStackCount(){ // arrange var subject = new Stack&amp;lt;int&amp;gt;(); // Subject here is the what we&amp;#39;re testing against Assert.</description></item><item><title>Triggers for Entity Framework Core</title><link>https://www.onthedrift.com/posts/efcore-triggered-part1/</link><pubDate>Fri, 23 Apr 2021 00:00:00 +0000</pubDate><author>koen@linker.io (Koen)</author><guid>https://www.onthedrift.com/posts/efcore-triggered-part1/</guid><description>When our codebase grows, so does its complexity. One way of managing this growing complexity is by leveraging triggers. Essentially this means that weâ€™re able to run arbitrary code whenever a database commit occurs. Luckily for us, EF Core already provides the necessary infrastructure to embrace triggers. All we need to add is a bit of plumbing. EntityFrameworkCore.Triggered is a NuGet package that does just that. The source can be found over on Github.</description></item><item><title>Activator utilities: activate anything!</title><link>https://www.onthedrift.com/posts/activator-utilities/</link><pubDate>Thu, 22 Apr 2021 00:00:00 +0000</pubDate><author>koen@linker.io (Koen)</author><guid>https://www.onthedrift.com/posts/activator-utilities/</guid><description>&lt;p>Dependency injection (DI) is a well-known technique that helps in writing more maintainable code. .NET has excellent support for Dependency injection and is heavily used in platforms such as ASP.NET Core. However, did you know there is a way to automatically instantiate a type with constructor arguments provided from an IServiceProvider without having to register that type with the DI Container first? That&amp;rsquo;s where &lt;a href="https://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.dependencyinjection.activatorutilities?view=dotnet-plat-ext-5.0">ActivatorUtilities&lt;/a> comes in.&lt;/p></description></item><item><title>Hello World</title><link>https://www.onthedrift.com/posts/hello-world/</link><pubDate>Wed, 21 Apr 2021 18:32:13 +0000</pubDate><author>koen@linker.io (Koen)</author><guid>https://www.onthedrift.com/posts/hello-world/</guid><description>Nothing to see here, just turning on the lights&amp;hellip;</description></item></channel></rss>