<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on On the drift</title><link>https://onthedrift.com/posts/</link><description>Recent content in Posts on On the drift</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>koen@linker.io (Koen)</managingEditor><webMaster>koen@linker.io (Koen)</webMaster><lastBuildDate>Thu, 22 Apr 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://onthedrift.com/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Activator utilities: activate anything!</title><link>https://onthedrift.com/posts/activator-utilities/</link><pubDate>Thu, 22 Apr 2021 00:00:00 +0000</pubDate><author>koen@linker.io (Koen)</author><guid>https://onthedrift.com/posts/activator-utilities/</guid><description>&lt;p>Dependency injection (DI) is a well-known technique that helps in writing more maintainable code. dotNET has excellent support for Dependency injection and is heavily used in platforms such as ASP.NET Core. However did you know there is a way to automatically instantiate a type with constructor arguments provided from an IServiceProvider without having to register that type with the DI Container first? That&amp;rsquo;s where &lt;a href="https://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.dependencyinjection.activatorutilities?view=dotnet-plat-ext-5.0">ActivatorUtilities&lt;/a> come in.&lt;/p></description></item><item><title>Hello World</title><link>https://onthedrift.com/posts/hello-world/</link><pubDate>Wed, 21 Apr 2021 18:32:13 +0000</pubDate><author>koen@linker.io (Koen)</author><guid>https://onthedrift.com/posts/hello-world/</guid><description>Nothing to see here, just turning on the lights&amp;hellip;</description></item></channel></rss>