<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>On the drift</title><link>https://onthedrift.com/</link><description>Recent content on On the drift</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>koen@linker.io (Koen)</managingEditor><webMaster>koen@linker.io (Koen)</webMaster><lastBuildDate>Thu, 22 Apr 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://onthedrift.com/index.xml" rel="self" type="application/rss+xml"/><item><title>Activator utilities</title><link>https://onthedrift.com/posts/activator-utilities/</link><pubDate>Thu, 22 Apr 2021 00:00:00 +0000</pubDate><author>koen@linker.io (Koen)</author><guid>https://onthedrift.com/posts/activator-utilities/</guid><description>Dependency injection (DI) is a well-known technique that helps in writing more maintainable code. .NET has excellent support for Dependency injection and is heavily used in platforms such as ASP.NET Core.
.NET and Dependency injection In .NET, Dependencies are typically resolved through an interface IServiceProvider. This is backed by a DI container (ServiceProvider) that holds all registrations of possible instances, including their lifetimes. This means that the .NET DI Container is responsible for both managing registrations, lifetimes, and hooking them up together.</description></item><item><title>Hello World</title><link>https://onthedrift.com/posts/hello-world/</link><pubDate>Wed, 21 Apr 2021 18:32:13 +0000</pubDate><author>koen@linker.io (Koen)</author><guid>https://onthedrift.com/posts/hello-world/</guid><description>Nothing to see here, just turning on the lights&amp;hellip;</description></item></channel></rss>