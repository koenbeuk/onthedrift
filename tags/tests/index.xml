<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Tests on On The Drift</title><link>https://www.onthedrift.com/tags/tests/</link><description>Recent content in Tests on On The Drift</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>koen@linker.io (Koen)</managingEditor><webMaster>koen@linker.io (Koen)</webMaster><lastBuildDate>Mon, 03 May 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://www.onthedrift.com/tags/tests/index.xml" rel="self" type="application/rss+xml"/><item><title>Introducing ScenarioTests, an experiment in improving the .NET testing experience</title><link>https://www.onthedrift.com/posts/scenario-tests/</link><pubDate>Mon, 03 May 2021 00:00:00 +0000</pubDate><author>koen@linker.io (Koen)</author><guid>https://www.onthedrift.com/posts/scenario-tests/</guid><description>When developing software, you&amp;rsquo;ll sooner or later be confronted with the notion of Tests. In the .NET landscape we have plenty of tools at our disposal to help us test our code. For the sake of an example, let&amp;rsquo;s imagine that we&amp;rsquo;re implementing a Stack datatype and we now want to prove that we can Push something on our stack:
[Fact] void Push_IncreasesStackCount(){ // arrange var subject = new Stack&amp;lt;int&amp;gt;(); // Subject here is the what we&amp;#39;re testing against Assert.</description></item></channel></rss>